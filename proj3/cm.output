Terminals unused in grammar

   ENDFILE
   ERROR


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration
    5            | fun-declaration

    6 $@1: %empty

    7 var-declaration: type-specifier ID $@1 SEMI

    8 $@2: %empty

    9 $@3: %empty

   10 var-declaration: type-specifier ID $@2 LSBRAKET NUM $@3 RSBRAKET SEMI

   11 type-specifier: INT
   12               | VOID

   13 $@4: %empty

   14 fun-declaration: type-specifier ID $@4 LPAREN params RPAREN compound-stmt

   15 params: param-list
   16       | VOID

   17 param-list: param-list COMMA param
   18           | param

   19 param: type-specifier ID

   20 $@5: %empty

   21 param: type-specifier ID $@5 LSBRAKET RSBRAKET

   22 compound-stmt: LCBRAKET local-declarations statement-list RCBRAKET

   23 local-declarations: local-declarations var-declaration
   24                   | empty

   25 statement-list: statement-list statement
   26               | empty

   27 statement: expression-stmt
   28          | compound-stmt
   29          | selection-stmt
   30          | iteration-stmt
   31          | return-stmt

   32 expression-stmt: expression SEMI
   33                | SEMI

   34 selection-stmt: IF LPAREN expression RPAREN statement
   35               | IF LPAREN expression RPAREN statement ELSE statement

   36 iteration-stmt: WHILE LPAREN expression RPAREN statement

   37 return-stmt: RETURN SEMI
   38            | RETURN expression SEMI

   39 expression: var ASSIGN expression
   40           | simple-expression

   41 var: ID

   42 $@6: %empty

   43 var: ID $@6 LSBRAKET expression RSBRAKET

   44 simple-expression: additive-expression relop additive-expression
   45                  | additive-expression

   46 relop: LT
   47      | LET
   48      | GT
   49      | GET
   50      | EQ
   51      | NEQ

   52 additive-expression: additive-expression addop term
   53                    | term

   54 addop: PLUS
   55      | MINUS

   56 term: term mulop factor
   57     | factor

   58 mulop: TIMES
   59      | OVER

   60 factor: LPAREN expression RPAREN
   61       | var
   62       | call
   63       | NUM

   64 $@7: %empty

   65 call: ID $@7 LPAREN args RPAREN

   66 args: arg-list
   67     | empty

   68 arg-list: arg-list COMMA expression
   69         | expression

   70 empty: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
ENDFILE (258)
ERROR (259)
IF (260) 34 35
INT (261) 11
VOID (262) 12 16
ELSE (263) 35
WHILE (264) 36
RETURN (265) 37 38
ID (266) 7 10 14 19 21 41 43 65
NUM (267) 10 63
PLUS (268) 54
MINUS (269) 55
TIMES (270) 58
OVER (271) 59
GET (272) 49
GT (273) 48
LET (274) 47
LT (275) 46
EQ (276) 50
NEQ (277) 51
ASSIGN (278) 39
SEMI (279) 7 10 32 33 37 38
COMMA (280) 17 68
LPAREN (281) 14 34 35 36 60 65
RPAREN (282) 14 34 35 36 60 65
LCBRAKET (283) 22
RCBRAKET (284) 22
LSBRAKET (285) 10 21 43
RSBRAKET (286) 10 21 43


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
program (33)
    on left: 1, on right: 0
declaration-list (34)
    on left: 2 3, on right: 1 2
declaration (35)
    on left: 4 5, on right: 2 3
var-declaration (36)
    on left: 7 10, on right: 4 23
$@1 (37)
    on left: 6, on right: 7
$@2 (38)
    on left: 8, on right: 10
$@3 (39)
    on left: 9, on right: 10
type-specifier (40)
    on left: 11 12, on right: 7 10 14 19 21
fun-declaration (41)
    on left: 14, on right: 5
$@4 (42)
    on left: 13, on right: 14
params (43)
    on left: 15 16, on right: 14
param-list (44)
    on left: 17 18, on right: 15 17
param (45)
    on left: 19 21, on right: 17 18
$@5 (46)
    on left: 20, on right: 21
compound-stmt (47)
    on left: 22, on right: 14 28
local-declarations (48)
    on left: 23 24, on right: 22 23
statement-list (49)
    on left: 25 26, on right: 22 25
statement (50)
    on left: 27 28 29 30 31, on right: 25 34 35 36
expression-stmt (51)
    on left: 32 33, on right: 27
selection-stmt (52)
    on left: 34 35, on right: 29
iteration-stmt (53)
    on left: 36, on right: 30
return-stmt (54)
    on left: 37 38, on right: 31
expression (55)
    on left: 39 40, on right: 32 34 35 36 38 39 43 60 68 69
var (56)
    on left: 41 43, on right: 39 61
$@6 (57)
    on left: 42, on right: 43
simple-expression (58)
    on left: 44 45, on right: 40
relop (59)
    on left: 46 47 48 49 50 51, on right: 44
additive-expression (60)
    on left: 52 53, on right: 44 45 52
addop (61)
    on left: 54 55, on right: 52
term (62)
    on left: 56 57, on right: 52 53 56
mulop (63)
    on left: 58 59, on right: 56
factor (64)
    on left: 60 61 62 63, on right: 56 57
call (65)
    on left: 65, on right: 62
$@7 (66)
    on left: 64, on right: 65
args (67)
    on left: 66 67, on right: 65
arg-list (68)
    on left: 68 69, on right: 66 68
empty (69)
    on left: 70, on right: 24 26 67


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7
    fun-declaration   go to state 8


State 1

   11 type-specifier: INT .

    $default  reduce using rule 11 (type-specifier)


State 2

   12 type-specifier: VOID .

    $default  reduce using rule 12 (type-specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: declaration-list .
    2 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var-declaration  go to state 6
    type-specifier   go to state 7
    fun-declaration  go to state 8


State 5

    3 declaration-list: declaration .

    $default  reduce using rule 3 (declaration-list)


State 6

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 7

    7 var-declaration: type-specifier . ID $@1 SEMI
   10                | type-specifier . ID $@2 LSBRAKET NUM $@3 RSBRAKET SEMI
   14 fun-declaration: type-specifier . ID $@4 LPAREN params RPAREN compound-stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end .

    $default  accept


State 10

    2 declaration-list: declaration-list declaration .

    $default  reduce using rule 2 (declaration-list)


State 11

    7 var-declaration: type-specifier ID . $@1 SEMI
   10                | type-specifier ID . $@2 LSBRAKET NUM $@3 RSBRAKET SEMI
   14 fun-declaration: type-specifier ID . $@4 LPAREN params RPAREN compound-stmt

    LPAREN    reduce using rule 13 ($@4)
    LSBRAKET  reduce using rule 8 ($@2)
    $default  reduce using rule 6 ($@1)

    $@1  go to state 12
    $@2  go to state 13
    $@4  go to state 14


State 12

    7 var-declaration: type-specifier ID $@1 . SEMI

    SEMI  shift, and go to state 15


State 13

   10 var-declaration: type-specifier ID $@2 . LSBRAKET NUM $@3 RSBRAKET SEMI

    LSBRAKET  shift, and go to state 16


State 14

   14 fun-declaration: type-specifier ID $@4 . LPAREN params RPAREN compound-stmt

    LPAREN  shift, and go to state 17


State 15

    7 var-declaration: type-specifier ID $@1 SEMI .

    $default  reduce using rule 7 (var-declaration)


State 16

   10 var-declaration: type-specifier ID $@2 LSBRAKET . NUM $@3 RSBRAKET SEMI

    NUM  shift, and go to state 18


State 17

   14 fun-declaration: type-specifier ID $@4 LPAREN . params RPAREN compound-stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 19

    type-specifier  go to state 20
    params          go to state 21
    param-list      go to state 22
    param           go to state 23


State 18

   10 var-declaration: type-specifier ID $@2 LSBRAKET NUM . $@3 RSBRAKET SEMI

    $default  reduce using rule 9 ($@3)

    $@3  go to state 24


State 19

   12 type-specifier: VOID .
   16 params: VOID .

    RPAREN    reduce using rule 16 (params)
    $default  reduce using rule 12 (type-specifier)


State 20

   19 param: type-specifier . ID
   21      | type-specifier . ID $@5 LSBRAKET RSBRAKET

    ID  shift, and go to state 25


State 21

   14 fun-declaration: type-specifier ID $@4 LPAREN params . RPAREN compound-stmt

    RPAREN  shift, and go to state 26


State 22

   15 params: param-list .
   17 param-list: param-list . COMMA param

    COMMA  shift, and go to state 27

    $default  reduce using rule 15 (params)


State 23

   18 param-list: param .

    $default  reduce using rule 18 (param-list)


State 24

   10 var-declaration: type-specifier ID $@2 LSBRAKET NUM $@3 . RSBRAKET SEMI

    RSBRAKET  shift, and go to state 28


State 25

   19 param: type-specifier ID .
   21      | type-specifier ID . $@5 LSBRAKET RSBRAKET

    LSBRAKET  reduce using rule 20 ($@5)
    $default  reduce using rule 19 (param)

    $@5  go to state 29


State 26

   14 fun-declaration: type-specifier ID $@4 LPAREN params RPAREN . compound-stmt

    LCBRAKET  shift, and go to state 30

    compound-stmt  go to state 31


State 27

   17 param-list: param-list COMMA . param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type-specifier  go to state 20
    param           go to state 32


State 28

   10 var-declaration: type-specifier ID $@2 LSBRAKET NUM $@3 RSBRAKET . SEMI

    SEMI  shift, and go to state 33


State 29

   21 param: type-specifier ID $@5 . LSBRAKET RSBRAKET

    LSBRAKET  shift, and go to state 34


State 30

   22 compound-stmt: LCBRAKET . local-declarations statement-list RCBRAKET

    $default  reduce using rule 70 (empty)

    local-declarations  go to state 35
    empty               go to state 36


State 31

   14 fun-declaration: type-specifier ID $@4 LPAREN params RPAREN compound-stmt .

    $default  reduce using rule 14 (fun-declaration)


State 32

   17 param-list: param-list COMMA param .

    $default  reduce using rule 17 (param-list)


State 33

   10 var-declaration: type-specifier ID $@2 LSBRAKET NUM $@3 RSBRAKET SEMI .

    $default  reduce using rule 10 (var-declaration)


State 34

   21 param: type-specifier ID $@5 LSBRAKET . RSBRAKET

    RSBRAKET  shift, and go to state 37


State 35

   22 compound-stmt: LCBRAKET local-declarations . statement-list RCBRAKET
   23 local-declarations: local-declarations . var-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 70 (empty)

    var-declaration  go to state 38
    type-specifier   go to state 39
    statement-list   go to state 40
    empty            go to state 41


State 36

   24 local-declarations: empty .

    $default  reduce using rule 24 (local-declarations)


State 37

   21 param: type-specifier ID $@5 LSBRAKET RSBRAKET .

    $default  reduce using rule 21 (param)


State 38

   23 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 23 (local-declarations)


State 39

    7 var-declaration: type-specifier . ID $@1 SEMI
   10                | type-specifier . ID $@2 LSBRAKET NUM $@3 RSBRAKET SEMI

    ID  shift, and go to state 42


State 40

   22 compound-stmt: LCBRAKET local-declarations statement-list . RCBRAKET
   25 statement-list: statement-list . statement

    IF        shift, and go to state 43
    WHILE     shift, and go to state 44
    RETURN    shift, and go to state 45
    ID        shift, and go to state 46
    NUM       shift, and go to state 47
    SEMI      shift, and go to state 48
    LPAREN    shift, and go to state 49
    LCBRAKET  shift, and go to state 30
    RCBRAKET  shift, and go to state 50

    compound-stmt        go to state 51
    statement            go to state 52
    expression-stmt      go to state 53
    selection-stmt       go to state 54
    iteration-stmt       go to state 55
    return-stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 41

   26 statement-list: empty .

    $default  reduce using rule 26 (statement-list)


State 42

    7 var-declaration: type-specifier ID . $@1 SEMI
   10                | type-specifier ID . $@2 LSBRAKET NUM $@3 RSBRAKET SEMI

    LSBRAKET  reduce using rule 8 ($@2)
    $default  reduce using rule 6 ($@1)

    $@1  go to state 12
    $@2  go to state 13


State 43

   34 selection-stmt: IF . LPAREN expression RPAREN statement
   35               | IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN  shift, and go to state 64


State 44

   36 iteration-stmt: WHILE . LPAREN expression RPAREN statement

    LPAREN  shift, and go to state 65


State 45

   37 return-stmt: RETURN . SEMI
   38            | RETURN . expression SEMI

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    SEMI    shift, and go to state 66
    LPAREN  shift, and go to state 49

    expression           go to state 67
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 46

   41 var: ID .
   43    | ID . $@6 LSBRAKET expression RSBRAKET
   65 call: ID . $@7 LPAREN args RPAREN

    LPAREN    reduce using rule 64 ($@7)
    LSBRAKET  reduce using rule 42 ($@6)
    $default  reduce using rule 41 (var)

    $@6  go to state 68
    $@7  go to state 69


State 47

   63 factor: NUM .

    $default  reduce using rule 63 (factor)


State 48

   33 expression-stmt: SEMI .

    $default  reduce using rule 33 (expression-stmt)


State 49

   60 factor: LPAREN . expression RPAREN

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    expression           go to state 70
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 50

   22 compound-stmt: LCBRAKET local-declarations statement-list RCBRAKET .

    $default  reduce using rule 22 (compound-stmt)


State 51

   28 statement: compound-stmt .

    $default  reduce using rule 28 (statement)


State 52

   25 statement-list: statement-list statement .

    $default  reduce using rule 25 (statement-list)


State 53

   27 statement: expression-stmt .

    $default  reduce using rule 27 (statement)


State 54

   29 statement: selection-stmt .

    $default  reduce using rule 29 (statement)


State 55

   30 statement: iteration-stmt .

    $default  reduce using rule 30 (statement)


State 56

   31 statement: return-stmt .

    $default  reduce using rule 31 (statement)


State 57

   32 expression-stmt: expression . SEMI

    SEMI  shift, and go to state 71


State 58

   39 expression: var . ASSIGN expression
   61 factor: var .

    ASSIGN  shift, and go to state 72

    $default  reduce using rule 61 (factor)


State 59

   40 expression: simple-expression .

    $default  reduce using rule 40 (expression)


State 60

   44 simple-expression: additive-expression . relop additive-expression
   45                  | additive-expression .
   52 additive-expression: additive-expression . addop term

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    GET    shift, and go to state 75
    GT     shift, and go to state 76
    LET    shift, and go to state 77
    LT     shift, and go to state 78
    EQ     shift, and go to state 79
    NEQ    shift, and go to state 80

    $default  reduce using rule 45 (simple-expression)

    relop  go to state 81
    addop  go to state 82


State 61

   53 additive-expression: term .
   56 term: term . mulop factor

    TIMES  shift, and go to state 83
    OVER   shift, and go to state 84

    $default  reduce using rule 53 (additive-expression)

    mulop  go to state 85


State 62

   57 term: factor .

    $default  reduce using rule 57 (term)


State 63

   62 factor: call .

    $default  reduce using rule 62 (factor)


State 64

   34 selection-stmt: IF LPAREN . expression RPAREN statement
   35               | IF LPAREN . expression RPAREN statement ELSE statement

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    expression           go to state 86
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 65

   36 iteration-stmt: WHILE LPAREN . expression RPAREN statement

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    expression           go to state 87
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 66

   37 return-stmt: RETURN SEMI .

    $default  reduce using rule 37 (return-stmt)


State 67

   38 return-stmt: RETURN expression . SEMI

    SEMI  shift, and go to state 88


State 68

   43 var: ID $@6 . LSBRAKET expression RSBRAKET

    LSBRAKET  shift, and go to state 89


State 69

   65 call: ID $@7 . LPAREN args RPAREN

    LPAREN  shift, and go to state 90


State 70

   60 factor: LPAREN expression . RPAREN

    RPAREN  shift, and go to state 91


State 71

   32 expression-stmt: expression SEMI .

    $default  reduce using rule 32 (expression-stmt)


State 72

   39 expression: var ASSIGN . expression

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    expression           go to state 92
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 73

   54 addop: PLUS .

    $default  reduce using rule 54 (addop)


State 74

   55 addop: MINUS .

    $default  reduce using rule 55 (addop)


State 75

   49 relop: GET .

    $default  reduce using rule 49 (relop)


State 76

   48 relop: GT .

    $default  reduce using rule 48 (relop)


State 77

   47 relop: LET .

    $default  reduce using rule 47 (relop)


State 78

   46 relop: LT .

    $default  reduce using rule 46 (relop)


State 79

   50 relop: EQ .

    $default  reduce using rule 50 (relop)


State 80

   51 relop: NEQ .

    $default  reduce using rule 51 (relop)


State 81

   44 simple-expression: additive-expression relop . additive-expression

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    var                  go to state 93
    additive-expression  go to state 94
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 82

   52 additive-expression: additive-expression addop . term

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    var     go to state 93
    term    go to state 95
    factor  go to state 62
    call    go to state 63


State 83

   58 mulop: TIMES .

    $default  reduce using rule 58 (mulop)


State 84

   59 mulop: OVER .

    $default  reduce using rule 59 (mulop)


State 85

   56 term: term mulop . factor

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    var     go to state 93
    factor  go to state 96
    call    go to state 63


State 86

   34 selection-stmt: IF LPAREN expression . RPAREN statement
   35               | IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN  shift, and go to state 97


State 87

   36 iteration-stmt: WHILE LPAREN expression . RPAREN statement

    RPAREN  shift, and go to state 98


State 88

   38 return-stmt: RETURN expression SEMI .

    $default  reduce using rule 38 (return-stmt)


State 89

   43 var: ID $@6 LSBRAKET . expression RSBRAKET

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    expression           go to state 99
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 90

   65 call: ID $@7 LPAREN . args RPAREN

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    $default  reduce using rule 70 (empty)

    expression           go to state 100
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63
    args                 go to state 101
    arg-list             go to state 102
    empty                go to state 103


State 91

   60 factor: LPAREN expression RPAREN .

    $default  reduce using rule 60 (factor)


State 92

   39 expression: var ASSIGN expression .

    $default  reduce using rule 39 (expression)


State 93

   61 factor: var .

    $default  reduce using rule 61 (factor)


State 94

   44 simple-expression: additive-expression relop additive-expression .
   52 additive-expression: additive-expression . addop term

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74

    $default  reduce using rule 44 (simple-expression)

    addop  go to state 82


State 95

   52 additive-expression: additive-expression addop term .
   56 term: term . mulop factor

    TIMES  shift, and go to state 83
    OVER   shift, and go to state 84

    $default  reduce using rule 52 (additive-expression)

    mulop  go to state 85


State 96

   56 term: term mulop factor .

    $default  reduce using rule 56 (term)


State 97

   34 selection-stmt: IF LPAREN expression RPAREN . statement
   35               | IF LPAREN expression RPAREN . statement ELSE statement

    IF        shift, and go to state 43
    WHILE     shift, and go to state 44
    RETURN    shift, and go to state 45
    ID        shift, and go to state 46
    NUM       shift, and go to state 47
    SEMI      shift, and go to state 48
    LPAREN    shift, and go to state 49
    LCBRAKET  shift, and go to state 30

    compound-stmt        go to state 51
    statement            go to state 104
    expression-stmt      go to state 53
    selection-stmt       go to state 54
    iteration-stmt       go to state 55
    return-stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 98

   36 iteration-stmt: WHILE LPAREN expression RPAREN . statement

    IF        shift, and go to state 43
    WHILE     shift, and go to state 44
    RETURN    shift, and go to state 45
    ID        shift, and go to state 46
    NUM       shift, and go to state 47
    SEMI      shift, and go to state 48
    LPAREN    shift, and go to state 49
    LCBRAKET  shift, and go to state 30

    compound-stmt        go to state 51
    statement            go to state 105
    expression-stmt      go to state 53
    selection-stmt       go to state 54
    iteration-stmt       go to state 55
    return-stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 99

   43 var: ID $@6 LSBRAKET expression . RSBRAKET

    RSBRAKET  shift, and go to state 106


State 100

   69 arg-list: expression .

    $default  reduce using rule 69 (arg-list)


State 101

   65 call: ID $@7 LPAREN args . RPAREN

    RPAREN  shift, and go to state 107


State 102

   66 args: arg-list .
   68 arg-list: arg-list . COMMA expression

    COMMA  shift, and go to state 108

    $default  reduce using rule 66 (args)


State 103

   67 args: empty .

    $default  reduce using rule 67 (args)


State 104

   34 selection-stmt: IF LPAREN expression RPAREN statement .
   35               | IF LPAREN expression RPAREN statement . ELSE statement

    ELSE  shift, and go to state 109

    $default  reduce using rule 34 (selection-stmt)


State 105

   36 iteration-stmt: WHILE LPAREN expression RPAREN statement .

    $default  reduce using rule 36 (iteration-stmt)


State 106

   43 var: ID $@6 LSBRAKET expression RSBRAKET .

    $default  reduce using rule 43 (var)


State 107

   65 call: ID $@7 LPAREN args RPAREN .

    $default  reduce using rule 65 (call)


State 108

   68 arg-list: arg-list COMMA . expression

    ID      shift, and go to state 46
    NUM     shift, and go to state 47
    LPAREN  shift, and go to state 49

    expression           go to state 110
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 109

   35 selection-stmt: IF LPAREN expression RPAREN statement ELSE . statement

    IF        shift, and go to state 43
    WHILE     shift, and go to state 44
    RETURN    shift, and go to state 45
    ID        shift, and go to state 46
    NUM       shift, and go to state 47
    SEMI      shift, and go to state 48
    LPAREN    shift, and go to state 49
    LCBRAKET  shift, and go to state 30

    compound-stmt        go to state 51
    statement            go to state 111
    expression-stmt      go to state 53
    selection-stmt       go to state 54
    iteration-stmt       go to state 55
    return-stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple-expression    go to state 59
    additive-expression  go to state 60
    term                 go to state 61
    factor               go to state 62
    call                 go to state 63


State 110

   68 arg-list: arg-list COMMA expression .

    $default  reduce using rule 68 (arg-list)


State 111

   35 selection-stmt: IF LPAREN expression RPAREN statement ELSE statement .

    $default  reduce using rule 35 (selection-stmt)
